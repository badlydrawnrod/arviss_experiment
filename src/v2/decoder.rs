use super::{cpu_types::DecodeRv32i, tobits::ToBits};

pub fn decode<T, U>(decoder: &mut T, code: u32) -> U
where
    T: DecodeRv32i + DecodeRv32i<Item = U>,
{
    // This function is generated by make_decoder.py. Do not edit.
    let c = ToBits(code);
    match c.opcode() {
        0b0000011 => match c.funct3() {
            0b000 => return decoder.lb(c.rd(), c.rs1(), c.iimmediate()),
            0b001 => return decoder.lh(c.rd(), c.rs1(), c.iimmediate()),
            0b010 => return decoder.lw(c.rd(), c.rs1(), c.iimmediate()),
            0b100 => return decoder.lbu(c.rd(), c.rs1(), c.iimmediate()),
            0b101 => return decoder.lhu(c.rd(), c.rs1(), c.iimmediate()),
            _ => {}
        },
        0b0001111 => match c.funct3() {
            0b000 => return decoder.fence(c.fm(), c.rd(), c.rs1()),
            _ => {}
        },
        0b0010011 => match c.funct3() {
            0b000 => return decoder.addi(c.rd(), c.rs1(), c.iimmediate()),
            0b001 => match c.funct7() {
                0b0000000 => return decoder.slli(c.rd(), c.rs1(), c.shamtw()),
                _ => {}
            },
            0b010 => return decoder.slti(c.rd(), c.rs1(), c.iimmediate()),
            0b011 => return decoder.sltiu(c.rd(), c.rs1(), c.iimmediate()),
            0b100 => return decoder.xori(c.rd(), c.rs1(), c.iimmediate()),
            0b101 => match c.funct7() {
                0b0000000 => return decoder.srli(c.rd(), c.rs1(), c.shamtw()),
                0b0100000 => return decoder.srai(c.rd(), c.rs1(), c.shamtw()),
                _ => {}
            },
            0b110 => return decoder.ori(c.rd(), c.rs1(), c.iimmediate()),
            0b111 => return decoder.andi(c.rd(), c.rs1(), c.iimmediate()),
            _ => {}
        },
        0b0010111 => return decoder.auipc(c.rd(), c.uimmediate()),
        0b0100011 => match c.funct3() {
            0b000 => return decoder.sb(c.rs1(), c.rs2(), c.simmediate()),
            0b001 => return decoder.sh(c.rs1(), c.rs2(), c.simmediate()),
            0b010 => return decoder.sw(c.rs1(), c.rs2(), c.simmediate()),
            _ => {}
        },
        0b0110011 => match c.funct3() {
            0b000 => match c.funct7() {
                0b0000000 => return decoder.add(c.rd(), c.rs1(), c.rs2()),
                0b0100000 => return decoder.sub(c.rd(), c.rs1(), c.rs2()),
                _ => {}
            },
            0b001 => match c.funct7() {
                0b0000000 => return decoder.sll(c.rd(), c.rs1(), c.rs2()),
                _ => {}
            },
            0b010 => match c.funct7() {
                0b0000000 => return decoder.slt(c.rd(), c.rs1(), c.rs2()),
                _ => {}
            },
            0b011 => match c.funct7() {
                0b0000000 => return decoder.sltu(c.rd(), c.rs1(), c.rs2()),
                _ => {}
            },
            0b100 => match c.funct7() {
                0b0000000 => return decoder.xor(c.rd(), c.rs1(), c.rs2()),
                _ => {}
            },
            0b101 => match c.funct7() {
                0b0000000 => return decoder.srl(c.rd(), c.rs1(), c.rs2()),
                0b0100000 => return decoder.sra(c.rd(), c.rs1(), c.rs2()),
                _ => {}
            },
            0b110 => match c.funct7() {
                0b0000000 => return decoder.or(c.rd(), c.rs1(), c.rs2()),
                _ => {}
            },
            0b111 => match c.funct7() {
                0b0000000 => return decoder.and(c.rd(), c.rs1(), c.rs2()),
                _ => {}
            },
            _ => {}
        },
        0b0110111 => return decoder.lui(c.rd(), c.uimmediate()),
        0b1100011 => match c.funct3() {
            0b000 => return decoder.beq(c.rs1(), c.rs2(), c.bimmediate()),
            0b001 => return decoder.bne(c.rs1(), c.rs2(), c.bimmediate()),
            0b100 => return decoder.blt(c.rs1(), c.rs2(), c.bimmediate()),
            0b101 => return decoder.bge(c.rs1(), c.rs2(), c.bimmediate()),
            0b110 => return decoder.bltu(c.rs1(), c.rs2(), c.bimmediate()),
            0b111 => return decoder.bgeu(c.rs1(), c.rs2(), c.bimmediate()),
            _ => {}
        },
        0b1100111 => match c.funct3() {
            0b000 => return decoder.jalr(c.rd(), c.rs1(), c.iimmediate()),
            _ => {}
        },
        0b1101111 => return decoder.jal(c.rd(), c.jimmediate()),
        0b1110011 => match c.funct3() {
            0b000 => match c.funct12() {
                0b000000000000 => match c.rs1_bits() {
                    0b00000 => match c.rd_bits() {
                        0b00000 => return decoder.ecall(),
                        _ => {}
                    },
                    _ => {}
                },
                0b000000000001 => match c.rs1_bits() {
                    0b00000 => match c.rd_bits() {
                        0b00000 => return decoder.ebreak(),
                        _ => {}
                    },
                    _ => {}
                },
                _ => {}
            },
            _ => {}
        },
        _ => {}
    }
    decoder.illegal(code)
}
