use super::{
    cpu_types::{DecodeRv32c, DecodeRv32i, DecodeRv32m},
    tobits::ToBits,
};

pub fn decode<T, U>(decoder: &mut T, code: u32) -> U
where
    T: DecodeRv32i
        + DecodeRv32i<Item = U>
        + DecodeRv32c
        + DecodeRv32c<Item = U>
        + DecodeRv32m
        + DecodeRv32m<Item = U>,
{
    // This function is generated by make_decoder.py. Do not edit.
    let c = ToBits(code);

    match code & 0xffffffff {
        0x00000073 => return decoder.ecall(),
        0x00100073 => return decoder.ebreak(),
        _ => {}
    }
    match code & 0xfe00707f {
        0x00000033 => return decoder.add(c.rd(), c.rs1(), c.rs2()),
        0x40000033 => return decoder.sub(c.rd(), c.rs1(), c.rs2()),
        0x00001033 => return decoder.sll(c.rd(), c.rs1(), c.rs2()),
        0x00002033 => return decoder.slt(c.rd(), c.rs1(), c.rs2()),
        0x00003033 => return decoder.sltu(c.rd(), c.rs1(), c.rs2()),
        0x00004033 => return decoder.xor(c.rd(), c.rs1(), c.rs2()),
        0x00005033 => return decoder.srl(c.rd(), c.rs1(), c.rs2()),
        0x40005033 => return decoder.sra(c.rd(), c.rs1(), c.rs2()),
        0x00006033 => return decoder.or(c.rd(), c.rs1(), c.rs2()),
        0x00007033 => return decoder.and(c.rd(), c.rs1(), c.rs2()),
        0x00001013 => return decoder.slli(c.rd(), c.rs1(), c.shamtw()),
        0x00005013 => return decoder.srli(c.rd(), c.rs1(), c.shamtw()),
        0x40005013 => return decoder.srai(c.rd(), c.rs1(), c.shamtw()),
        0x02000033 => return decoder.mul(c.rd(), c.rs1(), c.rs2()),
        0x02001033 => return decoder.mulh(c.rd(), c.rs1(), c.rs2()),
        0x02002033 => return decoder.mulhsu(c.rd(), c.rs1(), c.rs2()),
        0x02003033 => return decoder.mulhu(c.rd(), c.rs1(), c.rs2()),
        0x02004033 => return decoder.div(c.rd(), c.rs1(), c.rs2()),
        0x02005033 => return decoder.divu(c.rd(), c.rs1(), c.rs2()),
        0x02006033 => return decoder.rem(c.rd(), c.rs1(), c.rs2()),
        0x02007033 => return decoder.remu(c.rd(), c.rs1(), c.rs2()),
        _ => {}
    }
    match code & 0x0000ffff {
        0x9002 => return decoder.c_ebreak(),
        _ => {}
    }
    match code & 0x0000f07f {
        0x8002 => return decoder.c_jr(c.rs1n0()),
        0x9002 => return decoder.c_jalr(c.rs1n0()),
        _ => {}
    }
    match code & 0x0000707f {
        0x00000063 => return decoder.beq(c.rs1(), c.rs2(), c.bimmediate()),
        0x00001063 => return decoder.bne(c.rs1(), c.rs2(), c.bimmediate()),
        0x00004063 => return decoder.blt(c.rs1(), c.rs2(), c.bimmediate()),
        0x00005063 => return decoder.bge(c.rs1(), c.rs2(), c.bimmediate()),
        0x00006063 => return decoder.bltu(c.rs1(), c.rs2(), c.bimmediate()),
        0x00007063 => return decoder.bgeu(c.rs1(), c.rs2(), c.bimmediate()),
        0x00000067 => return decoder.jalr(c.rd(), c.rs1(), c.iimmediate()),
        0x00000013 => return decoder.addi(c.rd(), c.rs1(), c.iimmediate()),
        0x00002013 => return decoder.slti(c.rd(), c.rs1(), c.iimmediate()),
        0x00003013 => return decoder.sltiu(c.rd(), c.rs1(), c.iimmediate()),
        0x00004013 => return decoder.xori(c.rd(), c.rs1(), c.iimmediate()),
        0x00006013 => return decoder.ori(c.rd(), c.rs1(), c.iimmediate()),
        0x00007013 => return decoder.andi(c.rd(), c.rs1(), c.iimmediate()),
        0x00000003 => return decoder.lb(c.rd(), c.rs1(), c.iimmediate()),
        0x00001003 => return decoder.lh(c.rd(), c.rs1(), c.iimmediate()),
        0x00002003 => return decoder.lw(c.rd(), c.rs1(), c.iimmediate()),
        0x00004003 => return decoder.lbu(c.rd(), c.rs1(), c.iimmediate()),
        0x00005003 => return decoder.lhu(c.rd(), c.rs1(), c.iimmediate()),
        0x00000023 => return decoder.sb(c.rs1(), c.rs2(), c.simmediate()),
        0x00001023 => return decoder.sh(c.rs1(), c.rs2(), c.simmediate()),
        0x00002023 => return decoder.sw(c.rs1(), c.rs2(), c.simmediate()),
        0x0000000f => return decoder.fence(c.fm(), c.rd(), c.rs1()),
        _ => {}
    }
    match code & 0x0000ef83 {
        0x0001 => return decoder.c_nop(c.c_nzimm6()),
        0x6101 => return decoder.c_addi16sp(c.c_nzimm10()),
        _ => {}
    }
    match code & 0x0000fc63 {
        0x8c01 => return decoder.c_sub(c.rdrs1p(), c.rs2p()),
        0x8c21 => return decoder.c_xor(c.rdrs1p(), c.rs2p()),
        0x8c41 => return decoder.c_or(c.rdrs1p(), c.rs2p()),
        0x8c61 => return decoder.c_and(c.rdrs1p(), c.rs2p()),
        _ => {}
    }
    match code & 0x0000007f {
        0x0000006f => return decoder.jal(c.rd(), c.jimmediate()),
        0x00000037 => return decoder.lui(c.rd(), c.uimmediate()),
        0x00000017 => return decoder.auipc(c.rd(), c.uimmediate()),
        _ => {}
    }
    match code & 0x0000ec03 {
        0x8801 => return decoder.c_andi(c.rdrs1p(), c.c_imm6()),
        0x8001 => return decoder.c_srli(c.rdrs1p(), c.c_nzuimm6()),
        0x8401 => return decoder.c_srai(c.rdrs1p(), c.c_nzuimm6()),
        _ => {}
    }
    match code & 0x0000f003 {
        0x8002 => return decoder.c_mv(c.rd(), c.rs2n0()),
        0x9002 => return decoder.c_add(c.rdrs1(), c.rs2n0()),
        _ => {}
    }
    match code & 0x0000e003 {
        0x0000 => return decoder.c_addi4spn(c.rdp(), c.c_nzuimm10()),
        0x4000 => return decoder.c_lw(c.rdp(), c.rs1p(), c.c_uimm7()),
        0xc000 => return decoder.c_sw(c.rs1p(), c.rs2p(), c.c_uimm7()),
        0x0001 => return decoder.c_addi(c.rdrs1n0(), c.c_nzimm6()),
        0x4001 => return decoder.c_li(c.rd(), c.c_imm6()),
        0x6001 => return decoder.c_lui(c.rdn2(), c.c_nzimm18()),
        0xa001 => return decoder.c_j(c.c_imm12()),
        0xc001 => return decoder.c_beqz(c.rs1p(), c.c_bimm9()),
        0xe001 => return decoder.c_bnez(c.rs1p(), c.c_bimm9()),
        0x4002 => return decoder.c_lwsp(c.rdn0(), c.c_uimm8sp()),
        0xc002 => return decoder.c_swsp(c.c_rs2(), c.c_uimm8sp_s()),
        0x2001 => return decoder.c_jal(c.c_imm12()),
        0x0002 => return decoder.c_slli(c.rdrs1n0(), c.c_nzuimm6()),
        _ => {}
    }
    decoder.illegal(code)
}   
