use super::{
    cpu_types::{DecodeRv32c, DecodeRv32i, DecodeRv32m},
    tobits::ToBits,
};

pub fn decode<T, U>(decoder: &mut T, code: u32) -> U
where
    T: DecodeRv32i
        + DecodeRv32i<Item = U>
        + DecodeRv32c
        + DecodeRv32c<Item = U>
        + DecodeRv32m
        + DecodeRv32m<Item = U>,
{
    // This function is generated by make_decoder.py. Do not edit.
    let c = ToBits(code);

    match (
        c.bits(11, 7),
        c.bits(19, 15),
        c.bits(31, 20),
        c.bits(14, 12),
        c.bits(6, 0),
    ) {
        (0, 0, 0, 0, 115) => return decoder.ecall(),
        (0, 0, 1, 0, 115) => return decoder.ebreak(),
        _ => {}
    }
    match (c.bits(31, 25), c.bits(14, 12), c.bits(6, 0)) {
        (0, 0, 51) => return decoder.add(c.rd(), c.rs1(), c.rs2()),
        (32, 0, 51) => return decoder.sub(c.rd(), c.rs1(), c.rs2()),
        (0, 1, 51) => return decoder.sll(c.rd(), c.rs1(), c.rs2()),
        (0, 2, 51) => return decoder.slt(c.rd(), c.rs1(), c.rs2()),
        (0, 3, 51) => return decoder.sltu(c.rd(), c.rs1(), c.rs2()),
        (0, 4, 51) => return decoder.xor(c.rd(), c.rs1(), c.rs2()),
        (0, 5, 51) => return decoder.srl(c.rd(), c.rs1(), c.rs2()),
        (32, 5, 51) => return decoder.sra(c.rd(), c.rs1(), c.rs2()),
        (0, 6, 51) => return decoder.or(c.rd(), c.rs1(), c.rs2()),
        (0, 7, 51) => return decoder.and(c.rd(), c.rs1(), c.rs2()),
        (0, 1, 19) => return decoder.slli(c.rd(), c.rs1(), c.shamtw()),
        (0, 5, 19) => return decoder.srli(c.rd(), c.rs1(), c.shamtw()),
        (32, 5, 19) => return decoder.srai(c.rd(), c.rs1(), c.shamtw()),
        (1, 0, 51) => return decoder.mul(c.rd(), c.rs1(), c.rs2()),
        (1, 1, 51) => return decoder.mulh(c.rd(), c.rs1(), c.rs2()),
        (1, 2, 51) => return decoder.mulhsu(c.rd(), c.rs1(), c.rs2()),
        (1, 3, 51) => return decoder.mulhu(c.rd(), c.rs1(), c.rs2()),
        (1, 4, 51) => return decoder.div(c.rd(), c.rs1(), c.rs2()),
        (1, 5, 51) => return decoder.divu(c.rd(), c.rs1(), c.rs2()),
        (1, 6, 51) => return decoder.rem(c.rd(), c.rs1(), c.rs2()),
        (1, 7, 51) => return decoder.remu(c.rd(), c.rs1(), c.rs2()),
        _ => {}
    }
    match (c.bits(1, 0), c.bits(15, 13), c.bits(12, 12), c.bits(11, 2)) {
        (2, 4, 1, 0) => return decoder.c_ebreak(),
        _ => {}
    }
    match (c.bits(1, 0), c.bits(15, 13), c.bits(12, 12), c.bits(6, 2)) {
        (2, 4, 0, 0) => return decoder.c_jr(c.rs1n0()),
        (2, 4, 1, 0) => return decoder.c_jalr(c.rs1n0()),
        _ => {}
    }
    match (c.bits(14, 12), c.bits(6, 0)) {
        (0, 99) => return decoder.beq(c.rs1(), c.rs2(), c.bimmediate()),
        (1, 99) => return decoder.bne(c.rs1(), c.rs2(), c.bimmediate()),
        (4, 99) => return decoder.blt(c.rs1(), c.rs2(), c.bimmediate()),
        (5, 99) => return decoder.bge(c.rs1(), c.rs2(), c.bimmediate()),
        (6, 99) => return decoder.bltu(c.rs1(), c.rs2(), c.bimmediate()),
        (7, 99) => return decoder.bgeu(c.rs1(), c.rs2(), c.bimmediate()),
        (0, 103) => return decoder.jalr(c.rd(), c.rs1(), c.iimmediate()),
        (0, 19) => return decoder.addi(c.rd(), c.rs1(), c.iimmediate()),
        (2, 19) => return decoder.slti(c.rd(), c.rs1(), c.iimmediate()),
        (3, 19) => return decoder.sltiu(c.rd(), c.rs1(), c.iimmediate()),
        (4, 19) => return decoder.xori(c.rd(), c.rs1(), c.iimmediate()),
        (6, 19) => return decoder.ori(c.rd(), c.rs1(), c.iimmediate()),
        (7, 19) => return decoder.andi(c.rd(), c.rs1(), c.iimmediate()),
        (0, 3) => return decoder.lb(c.rd(), c.rs1(), c.iimmediate()),
        (1, 3) => return decoder.lh(c.rd(), c.rs1(), c.iimmediate()),
        (2, 3) => return decoder.lw(c.rd(), c.rs1(), c.iimmediate()),
        (4, 3) => return decoder.lbu(c.rd(), c.rs1(), c.iimmediate()),
        (5, 3) => return decoder.lhu(c.rd(), c.rs1(), c.iimmediate()),
        (0, 35) => return decoder.sb(c.rs1(), c.rs2(), c.simmediate()),
        (1, 35) => return decoder.sh(c.rs1(), c.rs2(), c.simmediate()),
        (2, 35) => return decoder.sw(c.rs1(), c.rs2(), c.simmediate()),
        (0, 15) => return decoder.fence(c.fm(), c.rd(), c.rs1()),
        _ => {}
    }
    match (c.bits(1, 0), c.bits(15, 13), c.bits(11, 7)) {
        (1, 0, 0) => return decoder.c_nop(c.c_nzimm6()),
        (1, 3, 2) => return decoder.c_addi16sp(c.c_nzimm10()),
        _ => {}
    }
    match (c.bits(1, 0), c.bits(15, 13), c.bits(12, 10), c.bits(6, 5)) {
        (1, 4, 3, 0) => return decoder.c_sub(c.rdrs1p(), c.rs2p()),
        (1, 4, 3, 1) => return decoder.c_xor(c.rdrs1p(), c.rs2p()),
        (1, 4, 3, 2) => return decoder.c_or(c.rdrs1p(), c.rs2p()),
        (1, 4, 3, 3) => return decoder.c_and(c.rdrs1p(), c.rs2p()),
        _ => {}
    }
    match (c.bits(6, 0)) {
        (111) => return decoder.jal(c.rd(), c.jimmediate()),
        (55) => return decoder.lui(c.rd(), c.uimmediate()),
        (23) => return decoder.auipc(c.rd(), c.uimmediate()),
        _ => {}
    }
    match (c.bits(1, 0), c.bits(15, 13), c.bits(11, 10)) {
        (1, 4, 2) => return decoder.c_andi(c.rdrs1p(), c.c_imm6()),
        (1, 4, 0) => return decoder.c_srli(c.rdrs1p(), c.c_nzuimm6()),
        (1, 4, 1) => return decoder.c_srai(c.rdrs1p(), c.c_nzuimm6()),
        _ => {}
    }
    match (c.bits(1, 0), c.bits(15, 13), c.bits(12, 12)) {
        (2, 4, 0) => return decoder.c_mv(c.rd(), c.rs2n0()),
        (2, 4, 1) => return decoder.c_add(c.rdrs1(), c.rs2n0()),
        _ => {}
    }
    match (c.bits(1, 0), c.bits(15, 13)) {
        (0, 0) => return decoder.c_addi4spn(c.rdp(), c.c_nzuimm10()),
        (0, 2) => return decoder.c_lw(c.rdp(), c.rs1p(), c.c_uimm7()),
        (0, 6) => return decoder.c_sw(c.rs1p(), c.rs2p(), c.c_uimm7()),
        (1, 0) => return decoder.c_addi(c.rdrs1n0(), c.c_nzimm6()),
        (1, 2) => return decoder.c_li(c.rd(), c.c_imm6()),
        (1, 3) => return decoder.c_lui(c.rdn2(), c.c_nzimm18()),
        (1, 5) => return decoder.c_j(c.c_imm12()),
        (1, 6) => return decoder.c_beqz(c.rs1p(), c.c_bimm9()),
        (1, 7) => return decoder.c_bnez(c.rs1p(), c.c_bimm9()),
        (2, 2) => return decoder.c_lwsp(c.rdn0(), c.c_uimm8sp()),
        (2, 6) => return decoder.c_swsp(c.c_rs2(), c.c_uimm8sp_s()),
        (1, 1) => return decoder.c_jal(c.c_imm12()),
        (2, 0) => return decoder.c_slli(c.rdrs1n0(), c.c_nzuimm6()),
        _ => {}
    }
    decoder.illegal(code)
}
