use super::{
    cpu_types::{DecodeRv32c, DecodeRv32i, DecodeRv32m},
    tobits::ToBits,
};

pub fn decode<T, U>(decoder: &mut T, code: u32) -> U
where
    T: DecodeRv32i
        + DecodeRv32i<Item = U>
        + DecodeRv32c
        + DecodeRv32c<Item = U>
        + DecodeRv32m
        + DecodeRv32m<Item = U>,
{
    // This function is generated by make_decoder.py. Do not edit.
    let c = ToBits(code);
    if c.bits(14, 12) == 0 && c.bits(6, 0) == 99 {
        return decoder.beq(c.rs1(), c.rs2(), c.bimmediate());
    }
    if c.bits(14, 12) == 1 && c.bits(6, 0) == 99 {
        return decoder.bne(c.rs1(), c.rs2(), c.bimmediate());
    }
    if c.bits(14, 12) == 4 && c.bits(6, 0) == 99 {
        return decoder.blt(c.rs1(), c.rs2(), c.bimmediate());
    }
    if c.bits(14, 12) == 5 && c.bits(6, 0) == 99 {
        return decoder.bge(c.rs1(), c.rs2(), c.bimmediate());
    }
    if c.bits(14, 12) == 6 && c.bits(6, 0) == 99 {
        return decoder.bltu(c.rs1(), c.rs2(), c.bimmediate());
    }
    if c.bits(14, 12) == 7 && c.bits(6, 0) == 99 {
        return decoder.bgeu(c.rs1(), c.rs2(), c.bimmediate());
    }
    if c.bits(14, 12) == 0 && c.bits(6, 0) == 103 {
        return decoder.jalr(c.rd(), c.rs1(), c.iimmediate());
    }
    if c.bits(6, 0) == 111 {
        return decoder.jal(c.rd(), c.jimmediate());
    }
    if c.bits(6, 0) == 55 {
        return decoder.lui(c.rd(), c.uimmediate());
    }
    if c.bits(6, 0) == 23 {
        return decoder.auipc(c.rd(), c.uimmediate());
    }
    if c.bits(14, 12) == 0 && c.bits(6, 0) == 19 {
        return decoder.addi(c.rd(), c.rs1(), c.iimmediate());
    }
    if c.bits(14, 12) == 2 && c.bits(6, 0) == 19 {
        return decoder.slti(c.rd(), c.rs1(), c.iimmediate());
    }
    if c.bits(14, 12) == 3 && c.bits(6, 0) == 19 {
        return decoder.sltiu(c.rd(), c.rs1(), c.iimmediate());
    }
    if c.bits(14, 12) == 4 && c.bits(6, 0) == 19 {
        return decoder.xori(c.rd(), c.rs1(), c.iimmediate());
    }
    if c.bits(14, 12) == 6 && c.bits(6, 0) == 19 {
        return decoder.ori(c.rd(), c.rs1(), c.iimmediate());
    }
    if c.bits(14, 12) == 7 && c.bits(6, 0) == 19 {
        return decoder.andi(c.rd(), c.rs1(), c.iimmediate());
    }
    if c.bits(31, 25) == 0 && c.bits(14, 12) == 0 && c.bits(6, 0) == 51 {
        return decoder.add(c.rd(), c.rs1(), c.rs2());
    }
    if c.bits(31, 25) == 32 && c.bits(14, 12) == 0 && c.bits(6, 0) == 51 {
        return decoder.sub(c.rd(), c.rs1(), c.rs2());
    }
    if c.bits(31, 25) == 0 && c.bits(14, 12) == 1 && c.bits(6, 0) == 51 {
        return decoder.sll(c.rd(), c.rs1(), c.rs2());
    }
    if c.bits(31, 25) == 0 && c.bits(14, 12) == 2 && c.bits(6, 0) == 51 {
        return decoder.slt(c.rd(), c.rs1(), c.rs2());
    }
    if c.bits(31, 25) == 0 && c.bits(14, 12) == 3 && c.bits(6, 0) == 51 {
        return decoder.sltu(c.rd(), c.rs1(), c.rs2());
    }
    if c.bits(31, 25) == 0 && c.bits(14, 12) == 4 && c.bits(6, 0) == 51 {
        return decoder.xor(c.rd(), c.rs1(), c.rs2());
    }
    if c.bits(31, 25) == 0 && c.bits(14, 12) == 5 && c.bits(6, 0) == 51 {
        return decoder.srl(c.rd(), c.rs1(), c.rs2());
    }
    if c.bits(31, 25) == 32 && c.bits(14, 12) == 5 && c.bits(6, 0) == 51 {
        return decoder.sra(c.rd(), c.rs1(), c.rs2());
    }
    if c.bits(31, 25) == 0 && c.bits(14, 12) == 6 && c.bits(6, 0) == 51 {
        return decoder.or(c.rd(), c.rs1(), c.rs2());
    }
    if c.bits(31, 25) == 0 && c.bits(14, 12) == 7 && c.bits(6, 0) == 51 {
        return decoder.and(c.rd(), c.rs1(), c.rs2());
    }
    if c.bits(14, 12) == 0 && c.bits(6, 0) == 3 {
        return decoder.lb(c.rd(), c.rs1(), c.iimmediate());
    }
    if c.bits(14, 12) == 1 && c.bits(6, 0) == 3 {
        return decoder.lh(c.rd(), c.rs1(), c.iimmediate());
    }
    if c.bits(14, 12) == 2 && c.bits(6, 0) == 3 {
        return decoder.lw(c.rd(), c.rs1(), c.iimmediate());
    }
    if c.bits(14, 12) == 4 && c.bits(6, 0) == 3 {
        return decoder.lbu(c.rd(), c.rs1(), c.iimmediate());
    }
    if c.bits(14, 12) == 5 && c.bits(6, 0) == 3 {
        return decoder.lhu(c.rd(), c.rs1(), c.iimmediate());
    }
    if c.bits(14, 12) == 0 && c.bits(6, 0) == 35 {
        return decoder.sb(c.rs1(), c.rs2(), c.simmediate());
    }
    if c.bits(14, 12) == 1 && c.bits(6, 0) == 35 {
        return decoder.sh(c.rs1(), c.rs2(), c.simmediate());
    }
    if c.bits(14, 12) == 2 && c.bits(6, 0) == 35 {
        return decoder.sw(c.rs1(), c.rs2(), c.simmediate());
    }
    if c.bits(14, 12) == 0 && c.bits(6, 0) == 15 {
        return decoder.fence(c.fm(), c.rd(), c.rs1());
    }
    if c.bits(11, 7) == 0
        && c.bits(19, 15) == 0
        && c.bits(31, 20) == 0
        && c.bits(14, 12) == 0
        && c.bits(6, 0) == 115
    {
        return decoder.ecall();
    }
    if c.bits(11, 7) == 0
        && c.bits(19, 15) == 0
        && c.bits(31, 20) == 1
        && c.bits(14, 12) == 0
        && c.bits(6, 0) == 115
    {
        return decoder.ebreak();
    }
    if c.bits(31, 25) == 0 && c.bits(14, 12) == 1 && c.bits(6, 0) == 19 {
        return decoder.slli(c.rd(), c.rs1(), c.shamtw());
    }
    if c.bits(31, 25) == 0 && c.bits(14, 12) == 5 && c.bits(6, 0) == 19 {
        return decoder.srli(c.rd(), c.rs1(), c.shamtw());
    }
    if c.bits(31, 25) == 32 && c.bits(14, 12) == 5 && c.bits(6, 0) == 19 {
        return decoder.srai(c.rd(), c.rs1(), c.shamtw());
    }
    if c.bits(31, 25) == 1 && c.bits(14, 12) == 0 && c.bits(6, 0) == 51 {
        return decoder.mul(c.rd(), c.rs1(), c.rs2());
    }
    if c.bits(31, 25) == 1 && c.bits(14, 12) == 1 && c.bits(6, 0) == 51 {
        return decoder.mulh(c.rd(), c.rs1(), c.rs2());
    }
    if c.bits(31, 25) == 1 && c.bits(14, 12) == 2 && c.bits(6, 0) == 51 {
        return decoder.mulhsu(c.rd(), c.rs1(), c.rs2());
    }
    if c.bits(31, 25) == 1 && c.bits(14, 12) == 3 && c.bits(6, 0) == 51 {
        return decoder.mulhu(c.rd(), c.rs1(), c.rs2());
    }
    if c.bits(31, 25) == 1 && c.bits(14, 12) == 4 && c.bits(6, 0) == 51 {
        return decoder.div(c.rd(), c.rs1(), c.rs2());
    }
    if c.bits(31, 25) == 1 && c.bits(14, 12) == 5 && c.bits(6, 0) == 51 {
        return decoder.divu(c.rd(), c.rs1(), c.rs2());
    }
    if c.bits(31, 25) == 1 && c.bits(14, 12) == 6 && c.bits(6, 0) == 51 {
        return decoder.rem(c.rd(), c.rs1(), c.rs2());
    }
    if c.bits(31, 25) == 1 && c.bits(14, 12) == 7 && c.bits(6, 0) == 51 {
        return decoder.remu(c.rd(), c.rs1(), c.rs2());
    }
    if c.bits(1, 0) == 0 && c.bits(15, 13) == 0 {
        return decoder.c_addi4spn(c.rdp(), c.c_nzuimm10());
    }
    if c.bits(1, 0) == 0 && c.bits(15, 13) == 2 {
        return decoder.c_lw(c.rdp(), c.rs1p(), c.c_uimm7());
    }
    if c.bits(1, 0) == 0 && c.bits(15, 13) == 6 {
        return decoder.c_sw(c.rs1p(), c.rs2p(), c.c_uimm7());
    }
    if c.bits(1, 0) == 1 && c.bits(15, 13) == 0 && c.bits(11, 7) == 0 {
        return decoder.c_nop(c.c_nzimm6());
    }
    if c.bits(1, 0) == 1 && c.bits(15, 13) == 0 {
        return decoder.c_addi(c.rdrs1n0(), c.c_nzimm6());
    }
    if c.bits(1, 0) == 1 && c.bits(15, 13) == 2 {
        return decoder.c_li(c.rd(), c.c_imm6());
    }
    if c.bits(1, 0) == 1 && c.bits(15, 13) == 3 && c.bits(11, 7) == 2 {
        return decoder.c_addi16sp(c.c_nzimm10());
    }
    if c.bits(1, 0) == 1 && c.bits(15, 13) == 3 {
        return decoder.c_lui(c.rdn2(), c.c_nzimm18());
    }
    if c.bits(1, 0) == 1 && c.bits(15, 13) == 4 && c.bits(11, 10) == 2 {
        return decoder.c_andi(c.rdrs1p(), c.c_imm6());
    }
    if c.bits(1, 0) == 1 && c.bits(15, 13) == 4 && c.bits(12, 10) == 3 && c.bits(6, 5) == 0 {
        return decoder.c_sub(c.rdrs1p(), c.rs2p());
    }
    if c.bits(1, 0) == 1 && c.bits(15, 13) == 4 && c.bits(12, 10) == 3 && c.bits(6, 5) == 1 {
        return decoder.c_xor(c.rdrs1p(), c.rs2p());
    }
    if c.bits(1, 0) == 1 && c.bits(15, 13) == 4 && c.bits(12, 10) == 3 && c.bits(6, 5) == 2 {
        return decoder.c_or(c.rdrs1p(), c.rs2p());
    }
    if c.bits(1, 0) == 1 && c.bits(15, 13) == 4 && c.bits(12, 10) == 3 && c.bits(6, 5) == 3 {
        return decoder.c_and(c.rdrs1p(), c.rs2p());
    }
    if c.bits(1, 0) == 1 && c.bits(15, 13) == 5 {
        return decoder.c_j(c.c_imm12());
    }
    if c.bits(1, 0) == 1 && c.bits(15, 13) == 6 {
        return decoder.c_beqz(c.rs1p(), c.c_bimm9());
    }
    if c.bits(1, 0) == 1 && c.bits(15, 13) == 7 {
        return decoder.c_bnez(c.rs1p(), c.c_bimm9());
    }
    if c.bits(1, 0) == 2 && c.bits(15, 13) == 2 {
        return decoder.c_lwsp(c.rdn0(), c.c_uimm8sp());
    }
    if c.bits(1, 0) == 2 && c.bits(15, 13) == 4 && c.bits(1, 1) == 0 && c.bits(6, 2) == 0 {
        return decoder.c_jr(c.rs1n0());
    }
    if c.bits(1, 0) == 2 && c.bits(15, 13) == 4 && c.bits(1, 1) == 0 {
        return decoder.c_mv(c.rd(), c.rs2n0());
    }
    if c.bits(1, 0) == 2 && c.bits(15, 13) == 4 && c.bits(1, 1) == 1 && c.bits(11, 2) == 0 {
        return decoder.c_ebreak();
    }
    if c.bits(1, 0) == 2 && c.bits(15, 13) == 4 && c.bits(1, 1) == 1 && c.bits(6, 2) == 0 {
        return decoder.c_jalr(c.rs1n0());
    }
    if c.bits(1, 0) == 2 && c.bits(15, 13) == 4 && c.bits(1, 1) == 1 {
        return decoder.c_add(c.rdrs1(), c.rs2n0());
    }
    if c.bits(1, 0) == 2 && c.bits(15, 13) == 6 {
        return decoder.c_swsp(c.c_rs2(), c.c_uimm8sp_s());
    }
    if c.bits(1, 0) == 1 && c.bits(15, 13) == 1 {
        return decoder.c_jal(c.c_imm12());
    }
    if c.bits(1, 0) == 1 && c.bits(15, 13) == 4 && c.bits(11, 10) == 0 {
        return decoder.c_srli(c.rdrs1p(), c.c_nzuimm6());
    }
    if c.bits(1, 0) == 1 && c.bits(15, 13) == 4 && c.bits(11, 10) == 1 {
        return decoder.c_srai(c.rdrs1p(), c.c_nzuimm6());
    }
    if c.bits(1, 0) == 2 && c.bits(15, 13) == 0 {
        return decoder.c_slli(c.rdrs1n0(), c.c_nzuimm6());
    }
    decoder.illegal(code)
}
